# Based heavily on "Amazon VPC with DNS and public IP addresses"
# from: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/sample-templates-services-us-west-2.html

AWSTemplateFormatVersion: '2010-09-09'
Description: 'General use VPC'
Parameters:
  SSHLocation:
    Description: Lock down SSH access to a specific CIDR range to make unauthorized connections harder
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: '0.0.0.0/0'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16' # 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Public1:
      CIDR: '10.0.1.0/24'
    Public2:
      CIDR: '10.0.2.0/24'
    Public3:
      CIDR: '10.0.3.0/24'
    Private1:
      CIDR: '10.0.4.0/24'
    Private2:
      CIDR: '10.0.5.0/24'
    Private3:
      CIDR: '10.0.6.0/24'
  AZConfig:
    AZ1:
      Zone: 'a'
    AZ2:
      Zone: 'b'
    AZ3:
      Zone: 'c'

Resources:
###################
# General resources
###################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [SubnetConfig, 'VPC', 'CIDR']
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: vpc-devops
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

############################
# Public subnets and routing
############################

  # Each Availability Zone needs it own subnet,
  # as subnets are restricted to a single Availability Zone.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ1', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Public1', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az1' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ2', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Public2', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az2' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ3', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Public3', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az3' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

  # Allows for communication between instances in a VPC and the Internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

  # Actually attaches the gateway created above to the VPC
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public routing

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

#############################
# Private subnets and routing
#############################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ1', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Private1', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az1' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ2', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Private2', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az2' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !FindInMap [ AZConfig, 'AZ3', 'Zone' ] ] ]
      CidrBlock: !FindInMap [ SubnetConfig, 'Private3', 'CIDR' ]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az3' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private

  # Private routing

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

####################
# Public Network ACL
####################

  # Access control lists define network access permissions
  # For example: only specific ports like 22, 80 and 443
  # below 1024 allow inbound connections at the VPC level.
  #
  # ACLs can be used in conjuction with Security Groups:
  # ACL entries define global rules, whereas Security Group Rules
  # should define instance-specific things like a DB connection.

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-acl' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

  InboundHTTPPublicNetworkAclAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 101
      Protocol: 6 # = TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InboundHTTPSPublicNetworkAclAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # SSH connections are directly allowed only from
  # your own CIDR block, defined at SSHLocation.
  InboundSSHPublicNetworkAclAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref SSHLocation
      PortRange:
        From: 22
        To: 22

  # Connections on ports above 1024 (non "reserved" ports)
  # should be restricted on a case-by-case basis.
  InboundEphemeralPublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 104
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Generally, outbound connections to the Internet should be allowed
  OutboundPublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNetworkAcl

#####################
# Private Network ACL
#####################

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-acl' ] ]
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private

  # Private subnet is not reachable from the Internet by definition,
  # so restricting it on the network level is usually unnecessary.

  InboundEphemeralPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  OutboundPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        !Ref PrivateSubnet1
      NetworkAclId:
        !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl


Outputs:
  VPCId:
    Description: 'VPCId of the newly created VPC'
    Value: !Ref VPC
  PublicSubnet1:
    Description: 'SubnetId of the public subnet 1'
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: 'SubnetId of the public subnet 2'
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: 'SubnetId of the public subnet 3'
    Value: !Ref PublicSubnet3